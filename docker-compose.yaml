version: '3.9'

services:
  nginx:
    build: ./nginx
    container_name: nginx_cinema
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    env_file: .env
    environment:
      AUTH_SERVICE_HOST: auth_service
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    volumes:
      - ./nginx/static:/usr/share/nginx/static:ro  # Статика(read-only)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Конфиги базовые
      - ./nginx/conf.d:/etc/nginx/conf.d:ro  # Конфиги для сервисов
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - auth_service
    networks:
      - sec_network

  auth_service:
    build: ./auth_service
    container_name: auth_service
    restart: unless-stopped
    env_file: .env
    depends_on:
      pg_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
    networks:
      - sec_network

  pg_db:
    image: postgres:17.5
    container_name: pg_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"

    volumes:
      - pg_db_data:/var/lib/postgresql/data
      - ./pg-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: 10s
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - sec_network

  redis_db:
    image: redis:7.2-bookworm
    container_name: redis_db
    restart: unless-stopped
    env_file: .env
    volumes:
      - redis_db_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--port", "${REDIS_PORT}", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "${REDIS_PORT}", "--raw", "-a", "${REDIS_PASSWORD}", "ping" ]
      start_period: 10s
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - sec_network

volumes:
  pg_db_data:
  redis_db_data:

networks:
  sec_network:
    driver: bridge
