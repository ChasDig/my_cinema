# Generated by Django 5.2.5 on 2025-08-21 13:27

import uuid

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def create_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("CREATE SCHEMA IF NOT EXISTS movies;")


def delete_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("DROP SCHEMA IF EXISTS movies CASCADE;")


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.RunPython(create_schemas, delete_schemas),
        migrations.CreateModel(
            name="Genres",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("title", models.CharField(max_length=128)),
                ("description", models.TextField()),
                (
                    "age_rating",
                    models.SmallIntegerField(
                        db_index=True,
                        help_text="Возрастной рейтинг жанра",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(18),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Жанр",
                "verbose_name_plural": "Жанры",
                "db_table": 'movies"."genres',
            },
        ),
        migrations.CreateModel(
            name="Movies",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "name_ru",
                    models.CharField(db_index=True, max_length=256, unique=True),
                ),
                ("name_eng", models.CharField(blank=True, max_length=256, unique=True)),
                (
                    "release_date",
                    models.DateField(db_index=True, help_text="Дата релиза фильма"),
                ),
                (
                    "rating",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=3,
                        default=0.0,
                        help_text="Рейтинг фильма",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "age_rating",
                    models.SmallIntegerField(
                        db_index=True,
                        help_text="Возрастной рейтинг фильма",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(18),
                        ],
                    ),
                ),
                ("description", models.TextField(default="")),
            ],
            options={
                "verbose_name": "Фильм",
                "verbose_name_plural": "Фильмы",
                "db_table": 'movies"."movies',
            },
        ),
        migrations.CreateModel(
            name="Persons",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("first_name", models.CharField(max_length=64)),
                ("second_name", models.CharField(max_length=64, null=True)),
                ("last_name", models.CharField(max_length=64)),
                ("birthday", models.DateField()),
                ("place_of_birth", models.CharField(max_length=64, null=True)),
                (
                    "type_employment",
                    models.CharField(
                        choices=[
                            ("actor", "Actor"),
                            ("producer", "Producer"),
                            ("director", "Director"),
                        ],
                        help_text="Тип деятельности персоны",
                        max_length=32,
                    ),
                ),
            ],
            options={
                "verbose_name": "Персона",
                "verbose_name_plural": "Персоны",
                "db_table": 'movies"."persons',
            },
        ),
        migrations.CreateModel(
            name="MoviesGenresAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "genre_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cinema.genres"
                    ),
                ),
                (
                    "movie_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cinema.movies"
                    ),
                ),
            ],
            options={
                "db_table": 'movies"."movies_genres_association',
            },
        ),
        migrations.AddField(
            model_name="movies",
            name="genres",
            field=models.ManyToManyField(
                through="cinema.MoviesGenresAssociation", to="cinema.genres"
            ),
        ),
        migrations.CreateModel(
            name="MoviesPersonsAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "movie_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cinema.movies"
                    ),
                ),
                (
                    "person_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cinema.persons"
                    ),
                ),
            ],
            options={
                "db_table": 'movies"."movies_persons_association',
            },
        ),
        migrations.AddField(
            model_name="movies",
            name="persons",
            field=models.ManyToManyField(
                through="cinema.MoviesPersonsAssociation", to="cinema.persons"
            ),
        ),
    ]
